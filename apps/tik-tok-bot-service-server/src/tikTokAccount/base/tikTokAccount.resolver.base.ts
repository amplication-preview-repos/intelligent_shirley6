/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TikTokAccount } from "./TikTokAccount";
import { TikTokAccountCountArgs } from "./TikTokAccountCountArgs";
import { TikTokAccountFindManyArgs } from "./TikTokAccountFindManyArgs";
import { TikTokAccountFindUniqueArgs } from "./TikTokAccountFindUniqueArgs";
import { CreateTikTokAccountArgs } from "./CreateTikTokAccountArgs";
import { UpdateTikTokAccountArgs } from "./UpdateTikTokAccountArgs";
import { DeleteTikTokAccountArgs } from "./DeleteTikTokAccountArgs";
import { TikTokAccountService } from "../tikTokAccount.service";
@graphql.Resolver(() => TikTokAccount)
export class TikTokAccountResolverBase {
  constructor(protected readonly service: TikTokAccountService) {}

  async _tikTokAccountsMeta(
    @graphql.Args() args: TikTokAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TikTokAccount])
  async tikTokAccounts(
    @graphql.Args() args: TikTokAccountFindManyArgs
  ): Promise<TikTokAccount[]> {
    return this.service.tikTokAccounts(args);
  }

  @graphql.Query(() => TikTokAccount, { nullable: true })
  async tikTokAccount(
    @graphql.Args() args: TikTokAccountFindUniqueArgs
  ): Promise<TikTokAccount | null> {
    const result = await this.service.tikTokAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TikTokAccount)
  async createTikTokAccount(
    @graphql.Args() args: CreateTikTokAccountArgs
  ): Promise<TikTokAccount> {
    return await this.service.createTikTokAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TikTokAccount)
  async updateTikTokAccount(
    @graphql.Args() args: UpdateTikTokAccountArgs
  ): Promise<TikTokAccount | null> {
    try {
      return await this.service.updateTikTokAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TikTokAccount)
  async deleteTikTokAccount(
    @graphql.Args() args: DeleteTikTokAccountArgs
  ): Promise<TikTokAccount | null> {
    try {
      return await this.service.deleteTikTokAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
