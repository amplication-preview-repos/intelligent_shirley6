/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TikTokAccountService } from "../tikTokAccount.service";
import { TikTokAccountCreateInput } from "./TikTokAccountCreateInput";
import { TikTokAccount } from "./TikTokAccount";
import { TikTokAccountFindManyArgs } from "./TikTokAccountFindManyArgs";
import { TikTokAccountWhereUniqueInput } from "./TikTokAccountWhereUniqueInput";
import { TikTokAccountUpdateInput } from "./TikTokAccountUpdateInput";

export class TikTokAccountControllerBase {
  constructor(protected readonly service: TikTokAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TikTokAccount })
  async createTikTokAccount(
    @common.Body() data: TikTokAccountCreateInput
  ): Promise<TikTokAccount> {
    return await this.service.createTikTokAccount({
      data: data,
      select: {
        accessToken: true,
        createdAt: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TikTokAccount] })
  @ApiNestedQuery(TikTokAccountFindManyArgs)
  async tikTokAccounts(
    @common.Req() request: Request
  ): Promise<TikTokAccount[]> {
    const args = plainToClass(TikTokAccountFindManyArgs, request.query);
    return this.service.tikTokAccounts({
      ...args,
      select: {
        accessToken: true,
        createdAt: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TikTokAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tikTokAccount(
    @common.Param() params: TikTokAccountWhereUniqueInput
  ): Promise<TikTokAccount | null> {
    const result = await this.service.tikTokAccount({
      where: params,
      select: {
        accessToken: true,
        createdAt: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TikTokAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTikTokAccount(
    @common.Param() params: TikTokAccountWhereUniqueInput,
    @common.Body() data: TikTokAccountUpdateInput
  ): Promise<TikTokAccount | null> {
    try {
      return await this.service.updateTikTokAccount({
        where: params,
        data: data,
        select: {
          accessToken: true,
          createdAt: true,
          id: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TikTokAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTikTokAccount(
    @common.Param() params: TikTokAccountWhereUniqueInput
  ): Promise<TikTokAccount | null> {
    try {
      return await this.service.deleteTikTokAccount({
        where: params,
        select: {
          accessToken: true,
          createdAt: true,
          id: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
